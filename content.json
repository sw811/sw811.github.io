[{"title":"underscore.js源码学习","date":"2017-03-13T12:29:48.000Z","path":"2017/03/13/underscore-js源码学习/","text":"underscore.js 源码学习（1）最近一直想看个源码，提升下技术能力，看了两天jquery，jquery真的是大神级别的框架，逻辑精妙，但是实在太长太复杂，不适合作为第一个源码来学习。于是，上了知乎看了看，好多人推荐underscore，恩，之前没怎么用过，因为一般都用jquery，或者自己写，或者有组内大神写的类库，先看了下api，大概了解了一下，觉得还不错，于是乎开始了源码的学习之路。 整体架构之类的也不用讲了需要个人体会，我讲讲他每个函数的封装，以及我看出来的问题，代码我都自己敲了一遍 random获取某两个整数之间的一个数(问题 必须是整数才能输出整数,并且传值为3到5时概率不一样) 123456789101112config.random = function (min, max) &#123; if (max == null) &#123; max = min; min = 0; &#125; &lt;!-- console.log(min + Math.floor(Math.random()*(max - min + 1))); --&gt; return min + Math.floor(Math.random()*(max - min + 1));&#125;;this.random(5);this.random(3, 5);this.random(2.3, 3);api没说必须传整数，所以这样是否就有问题了呢 now生成时间戳（问题是源码中似乎没调用Date.now(）只是写了下Date.now,是不是一个问题呢) 12345config.now = function() &#123; &lt;!-- debugger --&gt; return Date.now() || new Date().getTime();&#125;;this.now(); uniqueId生成唯一的dom 整数id 12345678config.uniqueId = function(prefix) &#123; &lt;!-- debugger --&gt; var idCounter = 0; var id = ++idCounter + ''; return prefix ? prefix + id : id;&#125;;this.uniqueId('aa');this.uniqueId(); noConflict防止全局变量冲突的解决方案 1234567891011var root = typeof self == 'object' &amp;&amp; self.self === self &amp;&amp; self || typeof global == 'object' &amp;&amp; global.global === global &amp;&amp; global || this || &#123;&#125;;var previousUnderscore = root._;config.noConflict = function() &#123; &lt;!-- debugger --&gt; root._ = previousUnderscore; return this;&#125;;var aa = this.noConflict(); identity返回自身值 1234config.identity = function(value)&#123; return value;&#125;;this.identity(11); constant返回一个能返回参数本身的函数1234config.identity = function(value)&#123; return value;&#125;;this.constant(11); 简单的api实现函数分析到此为止，明天继续","tags":[{"name":"技术博客","slug":"技术博客","permalink":"http://sunxiaoway.com/tags/技术博客/"}]}]